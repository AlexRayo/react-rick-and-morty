{"version":3,"sources":["components/characters/CharItem.js","components/characters/CharactersGrid.js","components/ui/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["CharItem","char","className","name","status","species","gender","origin","location","type","src","image","width","alt","loading","CharactersGrid","chars","isLoading","map","key","id","SearchBar","query","setQuery","placeholder","value","onChange","event","target","App","useState","setChars","setIsLoading","useEffect","a","fetch","then","res","json","data","results","apichars","getData","eventValue","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OA4BeA,G,MA1BE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACf,OACI,yBAAKC,UAAU,8FAEX,yBAAKA,UAAU,gCAEf,wBAAIA,UAAU,uDAAuDD,EAAKE,MAEtE,yBAAKD,UAAU,iJACX,4BACI,4BAAI,sCAAJ,IAAoBD,EAAKG,QACzB,4BAAI,uCAAJ,IAAqBH,EAAKI,SAC1B,4BAAI,sCAAJ,IAAoBJ,EAAKK,QACzB,4BAAI,sCAAJ,IAAoBL,EAAKM,OAAOJ,MAChC,4BAAI,wCAAJ,IAAsBF,EAAKO,SAASL,MACnCF,EAAKQ,KAAO,4BAAI,oCAAJ,IAAkBR,EAAKQ,MAAW,KAGvD,6BAAK,yBAAKC,IAAKT,EAAKU,MAAOC,MAAM,OAAOC,IAAI,MAAMC,QAAQ,cCD3DC,EAhBQ,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MACrB,OAD2C,EAAfC,UAExB,wBAAIf,UAAU,qCAAd,cAEAc,EACA,yBAAKd,UAAU,+BACdc,EAAME,KAAI,SAACjB,GAAD,OACP,kBAAC,EAAD,CAAUkB,IAAKlB,EAAKmB,GAAInB,KAAMA,QAIlC,wBAAIC,UAAU,eAAd,mCCJOmB,EARG,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OACI,6BACI,2BAAOrB,UAAU,uCAAuCsB,YAAY,0CAA0Cf,KAAK,OAAOgB,MAAOH,EAAOI,SAAU,SAACC,GAAD,OAAWJ,EAASI,EAAMC,OAAOH,YCgChLI,MAhCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNd,EADM,KACCe,EADD,OAEqBD,oBAAS,GAF9B,mBAENb,EAFM,KAEKe,EAFL,OAGWF,mBAAS,IAHpB,mBAGRR,EAHQ,KAGDC,EAHC,KAgBb,OAZAU,qBAAU,YACK,uCAAG,4BAAAC,EAAA,sEACSC,MAAM,mDAAD,OAAoDb,IAC/Ec,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,EAAKC,WAHP,OACRC,EADQ,OAIdV,EAASU,GACTT,GAAa,GALC,2CAAH,qDAObU,KAEA,CAACzB,EAAWK,IAGZ,yBAAKpB,UAAU,qCAEf,wBAAIA,UAAU,oBAAd,uBAKI,kBAAC,EAAD,CAAWoB,MAAOA,EAAOC,SAAU,SAACoB,GAAD,OAAgBpB,EAASoB,MAE5D,kBAAC,EAAD,CAAgB3B,MAAOA,EAAOC,UAAWA,MCnB7B2B,QACW,cAA7BC,OAAOrC,SAASsC,UAEe,UAA7BD,OAAOrC,SAASsC,UAEhBD,OAAOrC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8595f66b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CharItem = ({char}) => {\r\n    return (\r\n        <div className=\"mt-4 col-12 col-sm-6 col-md-4 col-lg-3 px-2 px-md-0 mx-auto align-self-end overflow-hidden\">\r\n\r\n            <div className=\"position-relative m-0 m-md-2\">\r\n\r\n            <h4 className=\"text-center align-self-end bg-purple-700 text-white\">{char.name}</h4>\r\n\r\n                <div className=\"w-100 h-100 bg-purple-700 position-absolute opacity-0 opacity-hover-09 text-white d-flex justify-content-center align-items-center transition\">\r\n                    <ul>\r\n                        <li><b>Status:</b> {char.status}</li>\r\n                        <li><b>Species:</b> {char.species}</li>\r\n                        <li><b>Gender:</b> {char.gender}</li>\r\n                        <li><b>Origin:</b> {char.origin.name}</li>\r\n                        <li><b>Location:</b> {char.location.name}</li>\r\n                        {char.type ? <li><b>Type:</b> {char.type}</li>:''}\r\n                    </ul>\r\n                </div>\r\n                <div><img src={char.image} width=\"100%\" alt=\"img\" loading=\"lazy\"></img></div>                  \r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharItem;\r\n","import React from 'react';\r\nimport CharItem from './CharItem.js'\r\n\r\nconst CharactersGrid = ({chars, isLoading}) => {\r\n    return isLoading ?  (       \r\n        <h2 className=\"text-center text-center display-1\">LOADING...</h2>\r\n    ) \r\n    : ( chars ? (\r\n        <div className=\"col col-12 d-flex flex-wrap\">\r\n        {chars.map((char)=>\r\n            <CharItem key={char.id} char={char}></CharItem>\r\n        )}            \r\n        </div>\r\n        ): (\r\n        <h2 className=\"text-center\">The character doesn't exist :/</h2>\r\n        ) \r\n    );\r\n}\r\n\r\nexport default CharactersGrid;\r\n","import React from 'react';\r\n\r\nconst SearchBar = ({query, setQuery}) => {\r\n    return (\r\n        <div>\r\n            <input className=\"form-control my-5 search-bar mx-auto\" placeholder=\"Type some name to find more about it...\" type=\"text\" value={query} onChange={(event) => setQuery(event.target.value)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n\r\n//Other way to do the same\r\n// import React, {useState} from 'react';\r\n\r\n// const SearchBar = ({setQuery}) => {\r\n//     const [text, setText] = useState('');\r\n//     function onChange(q){\r\n//         setText(q)\r\n//         setQuery(q)\r\n//     }\r\n    \r\n//     return (\r\n//         <div>\r\n//             <input className=\"form-control my-5\" placeholder=\"Type some name to find more about it...\" type=\"text\" value={text} onChange={(e) => onChange(e.target.value)}/>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default SearchBar;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport CharactersGrid from './components/characters/CharactersGrid.js';\nimport SearchBar from './components/ui/SearchBar.js'\n\nfunction App() {\n  const [chars, setChars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  let [query, setQuery] = useState([]);\n  useEffect(() => {\n    const getData = async () => {\n      const apichars = await fetch(`https://rickandmortyapi.com/api/character/?name=${query}`)\n      .then((res) => res.json())\n      .then((data) => data.results);\n      setChars(apichars);\n      setIsLoading(false);\n    }\n    getData()    \n    //send 'isLoading, query'  as dependencies\n  },[isLoading, query]);\n  let showMatches;\n  return (\n    <div className=\"container border my-5 bg-gray-100\">\n\n    <h1 className=\"text-center my-4\">Rick and Morty Wiki</h1>\n        {/*with the 'query' prop we send the input value that shoud have, and updated the state by 'set'\n        The 'setQuery' state expect the 'query' value and it takes the prop as the 'query'.\n        our SearchBar component works with the OnChange event, and this App component recibes this event\n        The paramether here is 'eventValue' btw :P*/}\n        <SearchBar query={query} setQuery={(eventValue) => setQuery(eventValue)}></SearchBar>\n\n        <CharactersGrid chars={chars} isLoading={isLoading} ></CharactersGrid>\n\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}